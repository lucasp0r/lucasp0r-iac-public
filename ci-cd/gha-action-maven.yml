
# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ dev-*,qa-*,release-*,preprod-* ]
    tags: [ release-* ]

jobs:
  build_maven:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - uses: actions/cache@v1
      name: Restoring maven cache
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven
        restore-keys: |
          ${{ runner.os }}-maven
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.SECRET_KEY }}
        aws-region: us-east-1
    - run: sed 's/PASSWD/'$(aws codeartifact get-authorization-token --domain commons --domain-owner 1289398012398 --query authorizationToken --output text)'/g' settings.xml > ~/.m2/settings.xml
      name: Creating maven settings
    - run: docker-compose up -d
      name: Spinning docker-compose up for tests
    - name: Build and test
      run: mvn clean deploy -U -B package --file pom.xml -DELASTICSEARCH_HOSTS=elasticsearch -DELASTICSEARCH_PORT=9200
    - name: Build and push Docker images
      uses: docker/build-push-action@v1.1.0
      with:
        username: xxxx
        password: ${{ secrets.ACR_PASS }}
        registry: xxxxx.azurecr.io
        repository: microservices-application
        tag_with_ref: true
        tags: ${{ github.run_number }}
    # Dockerfile steps for ECR
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.ECR_KEY }}
        aws-secret-access-key: ${{ secrets.ECR_SECRET }}
        aws-region: sa-east-1
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build branch name
      id: ref-name
      env:
        GITHUB_REF: ${{ github.ref }}
      run: echo ::set-output name=tag::$(echo ${GITHUB_REF} | cut -d'/' -f3)
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: microservices-application
        IMAGE_TAG: ${{ steps.ref-name.outputs.tag }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG